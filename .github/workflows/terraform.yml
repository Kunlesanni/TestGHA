name: 'Terraform Plan/Apply'

on:
  push:
    branches:
    - AzSample
  pull_request:
    branches:
    - AzSample

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
# env:
#   ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
#   ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
#   ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Az CLI login
      uses: azure/login@v1.4.6
      with:
          creds: ${{ secrets.AZURE_CREDS }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: tfplan
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v6
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })
                
  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform-plan]
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Az CLI login
      uses: azure/login@v1.4.6
      with:
          creds: ${{ secrets.AZURE_CREDS }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan












      
name: 'Terraform'

on:
  push:
    branches: [ "sortenv" ]
  pull_request:
  workflow_dispatch:

# env:
#       GH_API_PAT: ${{ secrets.GHAPIPAT }}
#       TF_CLOUD_ORGANIZATION: ${{ vars.TFCB_ORG}}
#       TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

permissions:
  contents: read
  pull-requests: write

# jobs:
#   terraform:
#     name: 'Terraform'
#     runs-on: ubuntu-latest
#     environment: dev

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash


jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Az CLI login
      uses: azure/login@v1.4.6
      with:
          creds: ${{ secrets.AZURE_CREDS }}

    # # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        # terraform_wrapper: false
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    #   - uses: actions/checkout@v2
    #   - name: Install Azure CLI
    #     run: |
    #       sudo apt-get install azure-cli
    #   - name: Configure Terraform to use Azure CLI
    #     run: |
    #       export PATH=$PATH:/usr/bin
    #       terraform init
    #   - name: Deploy infrastructure to Azure
    #     run: |
    #       terraform plan
    #       terraform apply


      


# jobs: 
#   Terraform:
#     name: "Terraform Plan"
#     runs-on: ubuntu-latest    
#     # environment: dev
#     defaults:
#       run:
#         shell: bash
#         # working-directory: dev

#     # env:
#       # TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}

#     steps:
#       # Checkout the repository to the GitHub Actions runner
#       - name: Checkout
#         uses: actions/checkout@v3

#       - uses: actions/checkout@v3
#       - name: Install Azure CLI
#         run: sudo apt-get install azure-cli

#       - name: Configure Terraform to use Azure CLI
#         run: export PATH=$PATH:/usr/bin

#       - name: 'Az CLI login'
#         uses: azure/login@v1.4.6
#         with:
#             creds: ${{ secrets.AZURE_CREDS }}

#       # Install the latest version of the Terraform CLI
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           # terraform_wrapper: false
#           cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
#       # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#       - name: Terraform Init
#         id: terraform-init
#         run: terraform init
          
#       # Checks that all Terraform configuration files adhere to a canonical format
#       # Will fail the build if not
#       # - name: Terraform Format
#       #   run: terraform fmt

#       # Generates an execution plan for Terraform
#       # - name: Terraform Plan
#       #   id: terraform-plan
#       #   run: terraform plan # -out=tfplan -var-file=dev.tfvars

#       # # Uploads the Terraform execution plan to Terraform Cloud for speculative plans
#       # - name: Terraform Cloud Upload Plan
#       #   if: github.event_name == 'pull_request'
#       #   run: terraform cloud push -name="GitHub Pull Request #$GITHUB_RUN_NUMBER" -var-file=dev.tfvars
      
#       - name: Terraform Apply
#         id: terraform-apply
#         run: terraform apply #-auto-approve -input=false      
        
      
#     # steps:
#     # - uses: actions/checkout@v2.0.0
#     # - name: Setup Terraform
#     #   uses: hashicorp/setup-terraform@v2
#     #   with:
#     #     terraform_version: 1.1.3
#     #     terraform_wrapper: false
