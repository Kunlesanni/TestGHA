name: 'Terraform Plan'

on:
  push:
    branches:
    - AzSample
  pull_request:
    branches:
    - AzSample

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
# env:
#   ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
#   ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
#   ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  upload-files:
    name : 'Upload Files'
    runs-on: windows-latest
    environment: dev
    env:
      TF_CLOUD_ORGANIZATION: ${{vars.TFCB_ORG}}
      TF_WORKSPACE: ${{vars.TF_WORKSPACE}} 

    steps:
    - uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: true
      name: Terraform Install

    - name: Az CLI login
      uses: azure/login@v1.4.6
      with:
          creds: ${{ secrets.AZURE_CREDS }}

    - uses: hashicorp/setup-terraform@v2
            
    - run: terraform init
          
    - id: plan
      run: terraform plan -no-color
          
    - run: echo ${{ steps.plan.outputs.stdout }}
    - run: echo ${{ steps.plan.outputs.stderr }}
    - run: echo ${{ steps.plan.outputs.exitcode }}
          
name: 'Terraform Apply'
    defaults:
      run:
        working-directory: ${{ github.workspace }}
        permissions:
        pull-requests: write
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
          
    - name: Terraform fmt
    id: fmt
    run: terraform fmt -check
    continue-on-error: true
          
    - name: Terraform Init
      id: init
      run: terraform init
          
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
          
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true
          
          - uses: actions/github-script@v6
            if: github.event_name == 'pull_request'
            env:
              PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                <details><summary>Validation Output</summary>
          
                \`\`\`\n
                ${{ steps.validate.outputs.stdout }}
                \`\`\`
          
                </details>
          
                #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
                <details><summary>Show Plan</summary>
          
                \`\`\`\n
                ${process.env.PLAN}
                \`\`\`
          
                </details>
          
                *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })